// This is a tutorial script demonstrating the Reflex programming language.
// 
// For detailed instructions and further information see 
// https://incapture.atlassian.net/wiki/display/PDT/Rapture+Getting+Started%3A+REFLEX//
//
// Reflex and Rapture are trademarks of Incapture Technologies LLC

SERIES_AUTHORITY="datacapture";
BLOB_AUTHORITY="tutorialBlob";
DOC_AUTHORITY="tutorialDoc";

BLOB_URI="blob://"+BLOB_AUTHORITY;
DOC_URI="document://"+DOC_AUTHORITY;
SERIES_URI="series://"+SERIES_AUTHORITY;

CSV_FILE = ENV.RAPTURE_TUTORIAL_CSV;
if (CSV_FILE == null) do
  CSV_FILE = "introDataInbound.csv";
  println("No CSV specified. Defaulting to "+CSV_FILE);
end

// **********************
// Create repos if needed
// **********************

if (!#blob.blobRepoExists(BLOB_URI)) do
     #blob.createBlobRepo(BLOB_URI, "BLOB {} USING MONGODB {prefix=\""+BLOB_AUTHORITY+"\" }", "REP {} USING MONGODB { prefix=\""+BLOB_AUTHORITY+"\"}");
end
if (!#doc.docRepoExists(DOC_URI)) do
    #doc.createDocRepo(DOC_URI, "REP {} USING MONGODB {prefix=\""+DOC_AUTHORITY+"\"}");
end
if (!#series.seriesRepoExists(SERIES_URI)) do
    #series.createSeriesRepo(SERIES_URI, "SREP {} USING MONGODB {prefix=\""+SERIES_AUTHORITY+"\"}");
end

if (!#doc.docExists(DOC_URI+"/introDataTranslated")) do
  println("Data has not been uploaded to the DOC repository.");
  assert(false);
end

// **********************
// Read the document as a JSON String. Convert the String to a Map
// then iterate through the map and recreate the lists.
// **********************

println("Read the document back and reconstitute the lists");

docStr = #doc.getDoc(DOC_URI+"/introDataTranslated");
docMap = fromjson(docStr);

csv = [ ] ;
indexes = docMap.index_id;
for i in keys(indexes) do
  index = indexes[i];
  for prices in keys(index) do
    priceMap = index[prices];
    for dateVal in keys(priceMap) do
      row = [];
      row.add(docMap.series_type);
      row.add(i);
      row.add(docMap.frequency);
      row.add(prices);
      row.add(dateVal);
      row.add(priceMap[dateVal]);
      csv.add(row);
    end
  end
end

println("Adding price data from " + DOC_URI+"/introDataTranslated to series at " + SERIES_URI);

// add each date/price pair to the series, using the following template for the URI:
// seriesRepoUri + series_type + "/" + "index_id" + "/" + "frequency" + "/" + "price_type"
// Since that is the order of the columns it's straightforward.
// Note that this can also be dome using the push operator: csv --> SERIES_URI;


for line in csv.subList(1, size(csv)) do
  location = SERIES_URI;
  columns = size(line);
  if (columns >= 2) do
     for field in line do
       if (columns == 1) do
         value = field;
       else if (columns == 2) do
         key = field;
       else do
         location = location+"/"+field;
       end
       columns = columns - 1;
     end
     #series.addDoubleToSeries(location, key, value);
   else do
     println("Line has less than 2 values: it will be skipped");
   end
end 
println("\nDone\n");
return("Done");
